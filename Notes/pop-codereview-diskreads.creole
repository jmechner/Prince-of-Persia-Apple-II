==Code Inspection of Disk Reads
This page looks at the code to find interesting lines which call into the RW18 disk routines to determine what data is
read from the game disk.

=== 02 POP Disk Routines/RW1835/POPBOOT35.S
The code in POPBOOT35.S contains boot loader code used to load initial game code into memory.

[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/02%20POP%20Disk%20Routines/RW1835/POPBOOT35.S#L47 | POPBOOT35.S:47]]
{{{
* Start loading the game

 jsr rw18
 db 7,$A9 ;Bbund ID=$A9 for side one

 jsr rw18 ;"seek" track one
 db 2,0,1

 jsr rw18 ;read in $EE00-FFFF
 hex C3EE

 jmp $EE00
}}}
This code will load all 18 sectors of side 1 / track 1 into memory locations $EE00-$FFFF.  This will load HIRES and
MASTER code into memory and then transfers execution to the 3rd stage boot loader in MASTER.



=== 01 POP Source/Source/MASTER.S
Most of the loading code is found in MASTER.S.

[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L186 | MASTER.S:186]]
{{{
FIRSTBOOT
 lda MIXEDoff
 jsr setaux

* Set BBund ID byte

 lda #POPside1
 sta BBundID

* Load hires tables & add'l hires routines

 sta RAMWRTmain
 lda #2
 sta track
 jsr rw18
 db RdGrp.Inc
 hex e0,e1,e2,e3,e4,e5,e6,e7,e8
 hex e9,ea,eb,ec,ed,00,00,00,00
}}}
This code will load the first 14 sectors from side 1 / track 2 into pages $E0 to $ED.  This loads HRTABLES and
UNPACK object code.


[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L245 | MASTER.S:245]]
{{{
*-------------------------------
*
* Load music (1K)
*
* Load at $5000 mainmem & move to aux l.c.
*
*-------------------------------
* Load music set 1 (title)

loadmusic1
 jsr setmain
 lda #34
 sta track
 jsr rw18
 db RdSeq,$4e ;we only want $50-53
}}}
This loads the 18 sectors in track 34 into pages $4E to $5F.  The comment indicates that this is for music set 1 and
it only cares about the  1k of data in sectors 2 to 5 but in reality the game won't run properly without at least some
of the other data loaded from this track.

A sample call stack for where loadmusic1 is called:
* [[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L1180 | LoadStage1A]]
* [[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L724 | SetupDHires]]
* [[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L691 | AttractLoop]]
* [[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L227 | FIRSTBOOT]]

On [[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L192 | line 192]]
this call path will be configured for side 1 of the disk.  I see a few other paths through the code which can lead to
AttractLoop code running but they appear to be using side 1 of the disk as well.

The loadmusic3 function just jumps to this function so the same code is used to load music set 3 from the same sectors 
into the same location in RAM.  It therefore looks like musicset1 is stored in track 34 of side 1 and musicset3 is
stored in track 34 of side 2.

**Note:** I did not find this data in Jordan Mechner's Prince-of-Persia-Apple-II repository so I extracted it from an
existing release disk image.


[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L264 | MASTER.S:264]]
{{{
* Load music set 2 (game)

loadmusic2
 jsr setmain
 lda #20
 sta track
 jsr rw18
 db RdGrp.Inc
 hex 50,51,52,53,00,00,00,00,00
 hex 00,00,00,00,00,00,00,00,00
 jmp ]mm
}}}
This code loads music set 2 from the first 4 sectors of track 20 into RAM pages $50 - $53.
**Note:** I did not find this data in Jordan Mechner's Prince-of-Persia-Apple-II repository so I extracted it from an
existing release disk image.


[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L415 | MASTER.S:415]]
{{{
*-------------------------------
LOADGAME
 jsr checkdisk ;sets main

 lda #23
 sta track
 jsr rw18
 db RdGrp
 hex 02,00,00,00,00,00,00,00,00
 hex 00,00,00,00,00,00,00,00,00
}}}
Track 23 of side 2 is used for saved game data.  Only 1 sector is required but all sectors in the track are reserved
for this data according to the comment on 
[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L391 | line 391]].


[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L490 | MASTER.S:490]]
{{{
*-------------------------------
vidstuff
 lda BBundID
 cmp #POPside2
 bne ]rts
 lda $c000
 cmp #"^"
 bne ]rts

 jsr setmain
 lda #12
 sta track
 jsr rw18
 db RdGrp.Inc
 hex 00,00,00,00,00,00,00,00,00
 hex 00,00,00,0c,0d,0e,0f,10,11
:loop jsr rw18
 db RdSeq.Inc
:sm hex 12
 lda :sm
 clc
 adc #$12
 sta :sm
 cmp #$6c
 bcc :loop
}}}
On side 2 of the disk, loads data from last 6 sectors of track 12 and all of the sectors from tracks 13 to 17.
**What is this video stuff data?**

**Note:** I did not find this data in Jordan Mechner's Prince-of-Persia-Apple-II repository so I extracted it from an
existing release disk image.


[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L519 | MASTER.S:519]]
{{{
*-------------------------------
* Track data for alt bg/char sets
*
* Set #:        0  1  2  3  4  5  6

bg1trk hex 05,00,07
bg2trk hex 12,02,09
ch4trk hex 0d,03,04,05,0a,0b
ch4off hex 0c,00,06,0c,00,06

*-------------------------------
rdbg1 ldx newBGset1
 cpx BGset1 ;already in memory?
 beq :rts ;yes--no need to load
 stx BGset1
 lda bg1trk,x
 sta track
 jsr rw18
 db RdSeq.Inc,$60
 jsr rw18
 db RdSeq.Inc,$72
]rts
:rts rts

rdbg2 ldx newBGset2
 cpx BGset2
 beq ]rts
 stx BGset2
 lda bg2trk,x
 sta track
 jsr rw18
 db RdSeq.Inc,$84
 rts

rdch4 ldx newCHset
 cpx CHset
 beq ]rts
 stx CHset
 lda ch4trk,x
 sta track
 lda ch4off,x
 beq :off0
 cmp #6
 beq :off6
 cmp #12
 beq :off12
 rts

:off12 jsr rw18
 db RdGrp.Inc
 hex 00,00,00,00,00,00,00,00,00
 hex 00,00,00,96,97,98,99,9a,9b
 jsr rw18
 db RdSeq.Inc,$9c
 rts

:off6 jsr rw18
 db RdGrp.Inc
 hex 00,00,00,00,00,00,96,97,98
 hex 99,9a,9b,9c,9d,9e,9f,a0,a1
 jsr rw18
 db RdGrp.Inc
 hex a2,a3,a4,a5,a6,a7,a8,a9,aa
 hex ab,ac,ad,00,00,00,00,00,00
 rts

:off0 jsr rw18
 db RdSeq.Inc,$96
 jsr rw18
 db RdGrp.Inc
 hex a8,a9,aa,ab,ac,ad,00,00,00
 hex 00,00,00,00,00,00,00,00,00
]rts rts
}}}

This table summarizes the image tables read in by this code:
|= Filename |= Disk Side |= Start Offset |= Length |
| IMG.BGTAB1.DUN | side 1 | 5/0x000 | 36 sectors |
| IMG.BGTAB1.PAL | side 2 | 0/0x000 | 36 sectors |
| IMG.BGTAB1.DUN | side 2 | 7/0x000 | 36 sectors |
| IMG.BGTAB2.DUN | side 1 | 18/0x0000 | 18 sectors |
| IMG.BGTAB2.PAL | side 2 | 2/0x0000 | 18 sectors |
| IMG.BGTAB2.DUN | side 2 | 9/0x0000 | 18 sectors |
| IMG.CHTAB4.GD | side 1 | 13/0x0c00 | 24 sectors |
| IMG.CHTAB4.SKEL | side 2 | 3/0x0000 | 24 sectors |
| IMG.CHTAB4.GD | side 2 | 4/0x0600 | 24 sectors |
| IMG.CHTAB4.FAT | side 2 | 5/0x0c00 | 24 sectors |
| IMG.CHTAB4.SHAD | side 2 | 10/0x0000 | 24 sectors |
| IMG.CHTAB4.VIZ | side 2 | 11/0x0600 | 24 sectors |


[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L593 | MASTER.S:593]]
{{{
*-------------------------------
*
* read blueprint
*
*-------------------------------
rdbluep
 jsr setbluep
 bne :reg1

:reg0 jsr rw18
 db RdGrpErr
 hex b7,b8,b9,ba,bb,bc,bd,be,bf
 hex 00,00,00,00,00,00,00,00,00
 bcc ]rts
 jsr error
 jmp :reg0

:reg1 jsr rw18
 db RdGrpErr
 hex 00,00,00,00,00,00,00,00,00
 hex b7,b8,b9,ba,bb,bc,bd,be,bf
 bcc ]rts
 jsr error
 jmp :reg1
}}}
[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MISC.S#L776 | MISC.S:776]]
{{{
* blueprint track & region lists (indexed by level #)
* NOTE--make sure these match lists in DIALOGER

bluepTRKlst
 db 33,33,32         ;3 levels on side A
 db 33,33,32,32,31,31   ;12 levels on side B
 db 30,30,29,29,28,28

bluepREGlst
 db 0,1,1
 db 0,1,0,1,0,1
 db 0,1,0,1,0,1
}}}

This table summarizes the levels read in by this code:
|= Filename |= Disk Side |= Start Offset |= Length |
| LEVEL0 | side 1 | 33/0x0000 | 9 sectors |
| LEVEL1 | side 1 | 33/0x0900 | 9 sectors |
| LEVEL2 | side 1 | 32/0x0900 | 9 sectors |
| LEVEL3 | side 2 | 33/0x0000 | 9 sectors |
| LEVEL4 | side 2 | 33/0x0900 | 9 sectors |
| LEVEL5 | side 2 | 32/0x0000 | 9 sectors |
| LEVEL6 | side 2 | 32/0x0900 | 9 sectors |
| LEVEL7 | side 2 | 31/0x0000 | 9 sectors |
| LEVEL8 | side 2 | 31/0x0900 | 9 sectors |
| LEVEL9 | side 2 | 30/0x0000 | 9 sectors |
| LEVEL10 | side 2 | 30/0x0900 | 9 sectors |
| LEVEL11 | side 2 | 29/0x0000 | 9 sectors |
| LEVEL12 | side 2 | 29/0x0900 | 9 sectors |
| LEVEL13 | side 2 | 28/0x0000 | 9 sectors |
| LEVEL14 | side 2 | 28/0x0900 | 9 sectors |


[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L1062 | MASTER.S:1062]]
{{{
*-------------------------------
*
* Load permanent code & data
* (only once)
*
*-------------------------------
loadperm
 lda #3
 sta track

 jsr setaux

 jsr rw18
 db RdSeq.Inc,$0e

 jsr rw18
 db RdGrp.Inc
 hex 04,05,06,07,08,09,0a,0b,0c
 hex 0d,20,21,22,23,24,25,26,27

 jsr setmain
 lda #9
 sta track
 jsr rw18
 db RdSeq.Inc,$84
 jsr rw18
 db RdSeq.Inc,$96

 jsr rw18
 db RdSeq.Inc,$08

 jsr rw18
 db RdGrp.Inc
 hex 1a,1b,1c,1d,1e,1f,a8,a9,aa
 hex ab,ac,ad,ae,af,b0,b1,b2,b3

 jsr rw18
 db RdGrp.Inc
 hex b4,b5,b6,b7,b8,b9,ba,bb,bc
 hex bd,be,bf,00,00,00,00,00,00

}}}
Reads track 3 into pages $0e to $1f.  This will load TABLES and FRAMEADV object files into RAM.

Reads the first 10 sectors of track 4 into pages $04 to $0d.  This will load in the GRAFIX object file.

Reads the last 8 sectors of track 4 into pages $20 to $27.  This will load in the TOPCTRL object file.

Reads tracks 9 and 10 into pages $84 to $a7.  This will load in the IMG.CHTAB2 file.

Reads track 11 and first 6 sectors of track 12 into pages $08 to $1f.  This will load in the IMG.CHTAB3 file.

Reads the last 12 sectors of track 12 and the first 12 sectors of track 13 into pages $a8 to $bf.  This will load in the
IMG.CHTAB5 file.


[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L1103 | MASTER.S:1103]]
{{{
*-------------------------------
*
* Load aux l.c. stuff (tracks 19-21 & 34)
* (includes music set 1)
*
* Load into main hires area & move to aux l.c.
*
*-------------------------------
 lda #19
 sta track

 jsr rw18
 db RdGrp.Inc
 hex 00,00,20,21,22,23,24,25,26
 hex 27,28,29,2a,2b,2c,2d,2e,2f

 jsr rw18
 db RdGrp.Inc
 hex 00,00,00,00,30,31,32,33,34
 hex 35,36,37,38,39,3a,3b,3c,3d
 jsr rw18
 db RdSeq.Inc,$3e

 lda #34
 sta track
 jsr rw18
 db RdGrp.Inc
 hex 00,00,50,51,52,53,54,55,56
 hex 57,58,59,5a,5b,5c,5d,5e,5f
}}}
Reads last 16 sectors of track 19 into pages $20 to $2f.  This loads the CTRLSUBS, SPECIALK, and VERSION object files
into RAM.

Reads last 14 sectors of track 20 into pages $30 to $3d.  This loads the SUBS and SOUND object files.

Reads track 21 into pages $3e to $4f.  This loads the MOVER and MISC object files.

Reads the last 16 sectors of track 34 into pages $50 to $5f.  This loads the MUSIC.SET1 file and 12 other sectors of
unknown data into memory.  **What is in this unknown area?**


[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L1140 | MASTER.S:1140]]
{{{
*-------------------------------
*
*  Stage 1: static dbl hires screens -- no animation
*  Stage 2: character animation only (bg is unpacked)
*  Stage 3: full game animation
*
*-------------------------------
*
* Load Stage 1 data (sida A)
*
*-------------------------------
]lsub sta track
:test jsr rw18
 db RdSeqErr.Inc,$40
 bcc :ok
 jsr error
 jmp :test
:ok
 jsr rw18
 db RdSeq.Inc,$52
 jsr rw18
 db RdSeq.Inc,$64
 jsr rw18
 db RdSeq.Inc,$76
 jsr rw18
 db RdSeq.Inc,$88
 rts

LoadStage1A
 jsr driveon

 lda #22
 jsr ]lsub

 jsr setmain
 jsr rw18
 db RdSeq.Inc,$60
 jsr rw18
 db RdSeq.Inc,$72
}}}

Reads track 22-26 into pages $40 to $99 (probably aux memory bank) from within the ]lsub sub-subroutine.  The code then
continues to read tracks 27-28 into pages $60-$83 in the main memory bank.  **What is this Stage1A data?  The comments
appear to indicate that is probably some static screen shots.**

**Note:** I did not find this data in Jordan Mechner's Prince-of-Persia-Apple-II repository so I extracted it from an
existing release disk image.


[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L1190 | MASTER.S:1190]]
{{{
*-------------------------------
*
*  Load stage 1 (side B)
*
*-------------------------------
LoadStage1B
 jsr driveon

 jsr loadmusic3 ;epilog

 lda IIGS
 bne :shires ;Super hi-res ending only if IIGS

 lda #18
 jsr ]lsub
}}}

Will end up reading track 18-22 into pages $40 to $99, side 2, from within the ]lsub call.

**Note:** I did not find this data in Jordan Mechner's Prince-of-Persia-Apple-II repository so I extracted it from an
existing release disk image.


[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L1210 | MASTER.S:1210]]
{{{
*-------------------------------
*
* Reload 2000-6000 auxmem
* (wiped out by dhires titles)
*
*-------------------------------
ReloadStuff
 jsr driveon

:test lda #4
 sta track
 jsr rw18
 db RdGrpErr
 hex 00,00,00,00,00,00,00,00,00
 hex 00,20,21,22,23,24,25,26,27
 bcc :ok
 jsr error
 jmp :test
:ok
 lda #15
 sta track
 jsr rw18
 db RdSeq.Inc,$28
 jsr rw18
 db RdSeq.Inc,$3a
 jsr rw18
 db RdSeq.Inc,$4c
}}}

Reads the last 8 sectors of track 4 into pages $20 to $27.  This reloads TOPCTRL object file into memory.

It then reads tracks 15-17 into RAM.  This loads FRAMEDEF, SEQTABLE, CTRL, COLL, GAMEBG, and AUTO into memory.


[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L1240 | MASTER.S:1240]]
{{{
*-------------------------------
*
*  Load stage 2 data (6000-a800)
*
*-------------------------------
LoadStage2
 ldx BBundID
 cpx #POPside2
 beq LoadStage2B

LoadStage2A
 jsr driveon

 lda #0
 jsr loadch7 ;side A only

 lda #29
]ls2 sta track

:test jsr rw18
 db RdSeqErr.Inc,$60
 bcc :ok
 jsr error
 jmp :test
:ok
 jsr rw18
 db RdSeq.Inc,$72
 jsr rw18
 db RdSeq.Inc,$84
 jsr rw18
 db RdGrp.Inc
 hex 96,97,98,99,9a,9b,9c,9d,9e
 hex 00,00,00,00,00,00,00,00,00

 lda #$ff
 sta BGset1
 sta BGset2
 sta CHset

 jmp driveoff

* Load chtable7 (side A only)

loadch7
 sta recheck0
:test lda #28
 sta track
 jsr rw18
 db RdGrpErr.Inc
 hex 00,00,00,00,00,00,00,00,00
 hex 00,00,00,00,9f,a0,a1,a2,a3
 bcc :ok
 jsr error
 jmp :test
:ok
]rts rts
}}}

Reads in tracks 29-31 and 9 sectors from track 32 on side 1 into memory.  This loads the IMG.CHTAB6.A and
PRINCESS.SIDEA.SCENE files.

Reads in the last 5 sectors of track 28.  This loads the IMG.CHTAB7 file into memory.


[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L1297 | MASTER.S:1297]]
{{{
*-------------------------------
*
*  Load stage 2 routines (side B)
*
*-------------------------------
LoadStage2B
 jsr driveon

 lda #24
 bne ]ls2
}}}
This will call back into the above ]ls2 routine to load tracks 24-26 and 9 sectors from track 27 on side 2.  This loads
the IMG.CHTAB6.B and PRINCESS.SIDEB.SCENE files.


[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/MASTER.S#L1308 | MASTER.S:1308]]
{{{
*-------------------------------
*
*  Load stage 3
*  Full version (from stage 1)
*
*  Reload 2000-AC00 auxmem, 6000-7200 mainmem
*
*-------------------------------
LoadStage3
 jsr driveon

 lda #4
 sta track

:loop jsr rw18
 db RdGrpErr.Inc
 hex 00,00,00,00,00,00,00,00,00
 hex 00,20,21,22,23,24,25,26,27
 bcc :ok
 jsr error
 jmp :loop
:ok
 jsr rw18
 db RdSeq.Inc,$60
 jsr rw18
 db RdSeq.Inc,$72 ;bgtable1

 jsr setmain
 jsr rw18
 db RdSeq.Inc,$60
 jsr rw18
 db RdSeq.Inc,$72

 jsr setaux

 lda #13
 sta track
 jsr rw18
 db RdGrp.Inc
 hex 00,00,00,00,00,00,00,00,00
 hex 00,00,00,96,97,98,99,9a,9b
 jsr rw18
 db RdSeq.Inc,$9c ;chtable4
 jsr rw18
 db RdSeq.Inc,$28
 jsr rw18
 db RdSeq.Inc,$3a
 jsr rw18
 db RdSeq.Inc,$4c
 jsr rw18
 db RdSeq.Inc,$84 ;bgtable2
}}}

Reads the last 8 sectors from track 4 on side 1 into pages $20 to $27.  Reloads the TOPCTRL object file into memory.

Reads tracks 5 and 6 into memory.  This reloads the IMG.BGTAB1.DUN file into memory.

Reads tracks 7 and 8 into memory.  This loads the IMG.CHTAB1 file into memory.

Reads the last 6 sectors of track 13 and track 14 into memory.  This reloads the IMG.CHTAB4.GD file into memory.

Reads in tracks 15 to 18 in RAM.  This will reload the FRAMEDEF, SEQTABLE, CTRL, COLL, GAMEBG, AUTO, and IMG.BGTAB2.DUN
into memory.



===01 POP Source/Source/UNPACK.S
[[https://github.com/jmechner/Prince-of-Persia-Apple-II/blob/master/01%20POP%20Source/Source/UNPACK.S#L844 | UNPACK.S:844]]
{{{
*===============================
*
* Load super hi-res data
*
*-------------------------------
LOADSUPER
 jsr rw18
 db ModID,$79 ;set "side C"

 lda #0
 sta track
 sta RAMWRTmain
 jsr loadscrn ;"Tracks" 0-6: palace (mainmem)

 sta RAMWRTaux
 jmp loadscrn ;"Tracks" 7-13: epilog (auxmem)

*-------------------------------
*
* Load super hi-res screen into $2000.9FFF
*
*-------------------------------
loadscrn
 lda #$20
:loop sta :sm
 jsr rw18
 db RdSeq.Inc
:sm db $20
 lda :sm
 clc
 adc #$12
 cmp #$9e
 bcc :loop ;load 7 tracks
]rts rts
}}}

Loads the first 14 tracks from side 3 into the main and aux video memory banks.  ** Why do I see all zeroes in these
sectors on the disk.  On the image from Asimov, it looks like this data is in tracks 14-23 instead.**
